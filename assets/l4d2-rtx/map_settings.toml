# Fog Settings ---------------------------------------------------------------------------------------------------------------------------------
# ~~ Parameters: 
#
# distance:     larger distance == less fog     [float]
# color:        R G B transmission              [3D Vector - 0-255]

[FOG]
    c1m1_hotel = { distance = 15000, color = [100, 100, 100] }
    c1m2_streets = { distance = 2500.000000, color = [22, 23, 20] }
    c2m1_highway = { distance = 5000.000000, color = [18, 171, 85] }
    c4m1_milltown_a = { distance = 3000, color = [100, 100, 100] }




# Water UV Scale -------------------------------------------------------------------------------------------------------------------------------
# :: Change water scaling per map
# ~~ Parameters: 
#
# Small values reduce repetition while larger values will increase tiling (default = 1.0)

[WATER]
    c3m2_swamp = 10.0



# Override culling per game area ---------------------------------------------------------------------------------------------------------------
# :: Useful console command: 'xo_debug_toggle_node_vis'
# ~~ Parameters:
#
# in_area:          the area the player has to be in                [int]
# areas:            area/s with forced visibility                   [int array]
# leafs:            leaf/s with forced visibility                   [int array]
#
# cull:             [0] disable frustum culling                     [int 0-5]
#                   [1] disable frustum culling in current area
#                   [2] stock
#                   [3] frustum culling (outside current area) + force all nodes/leafs in current area
#                   [4] ^ + outside of current area within certain dist to player (param: nocull_dist)
#                   [5] force all leafs/nodes within certain dist to player (param: nocull_dist)                            << default
#
# nocull_dist:      |> Distance around the player where objects wont get culled - only used on certain cull modes   [float] << defaults to 600.0
#
# -----------       :: This can be used to disable frustum culling for specified areas when the player is in specified leafs 
#                   :: Useful at area crossings when used in conjunction with nocull - area-specific markers that block visibility
# leaf_tweak:                                                                                   [array of structure below]
# [{                |>    in_leafs:     the leaf/s the player has to be in                      [int array]
#                   |>       areas:     area/s with forced visibility                           [int array]
#                   |>       leafs:     leaf/s with forced visibility                           [int array]
#                   |> nocull_dist:     uses per leaf value instead of area value if defined    [float]     << defaults to 0.0 (off)
# }]
# -----------       :: This can be used to forcefully cull parts of the map
# hide_areas:                                                                                   [array of structure below]
# [{                |>    areas:   area/s to hide                                               [int array]
#                   |>  N_leafs:   only hide area/s when NOT in leaf/s                          [int array]
# }]
# hide_leafs:       force hide leaf/s                                                           [int array]

[CULL]

    c1m1_hotel = [
        { in_area =   7, nocull_dist = 630.00, leaf_tweak = [
                { in_leafs = [2498], areas = [14] },
            ] },

        { in_area =   8, nocull_dist = 600.00, leaf_tweak = [
                { in_leafs = [3616, 3617], leafs = [3580] },
            ] },

        { in_area =  12, areas = [8], leafs = [
                2516
            ], nocull_dist = 600.00 },
        { in_area =  13, areas = [23], leafs = [
                2339
            ], nocull_dist = 950.00, leaf_tweak = [
                { in_leafs = [1939, 2324, 2328, 2331], areas = [13] },
            ] },

        { in_area =  14, leafs = [
                2549, 2599
            ], cull = 4, nocull_dist = 600.00, leaf_tweak = [
                { in_leafs = [2508, 2511], areas = [7] },
            ] },

        { in_area =  23, areas = [13], nocull_dist = 600.00 },
        { in_area =  24, leafs = [
                2856, 2881, 3938, 3969, 4373
            ], cull = 4, nocull_dist = 600.00, leaf_tweak = [
                { in_leafs = [3664, 4361, 4364, 4367, 4373, 4400], areas = [26] },
            ] },

        { in_area =  25, areas = [26], nocull_dist = 600.00 },
        { in_area =  26, areas = [25], leafs = [
                2856, 2881, 3938, 3969, 4340, 4373
            ], cull = 4, nocull_dist = 600.00 },
    ]



    c2m1_highway = [
        { in_area =   1, leafs = [
                938, 1395
            ], nocull_dist = 1000.000000, leaf_tweak = [
                { in_leafs = [341], areas = [1] },
                { in_leafs = [415], leafs = [559, 858] },
                { in_leafs = [548], leafs = [559, 858] },
            ] },
        { in_area =   2, leafs = [] },
        { in_area =   3, leafs = [] },
        { in_area =   4, leafs = [] },
        { in_area =   5, leafs = [] },
    ]

    c4m1_milltown_a = [
        { in_area =   2, cull = 5, nocull_dist = 600.0 },
    ]

    c5m3_cemetery = [
        { in_area =   4, cull = 1 },
    ]

    c6m1_riverbank = [
        { in_area =   1, cull = 1 },
    ]



# Hide Models ---------------------------------------------------------------------------------------------------------------------------------
# :: Can be used to hide models (eg. when a certain model is used a lot, it can make sense to hide them and manually re-add the models by adding them as references to map markers (toolkit) - will help with cpu bottlenecks)
# :: Useful console command: 'xo_debug_toggle_model_info'
# ~~ Parameters:
#
# name:             force hide models containing the specified substring                                                                [string array]
# radius:           force hide models with this radius (checking for radii is generally faster and the preferred way to filter models)  [float array]

[HIDEMODEL]
    #c1m1_hotel = { radius = [
    #        6.1857576, #models/props_junk/garbage_sodacan01a_fullscheet.mdl
    #    ]}



# Spawn unique markers meshes ---------------------------------------------------------------------------------------------------------------------------------
# :: Can be used as anchor mesh (same one can be spawned multiple times)
# ~~ Parameters:
#
# marker    ]     THIS:     number of marker mesh - can get culled BUT that can be controlled via leaf/area forcing (initial spawning can't be forced)  [int 0-100]
# nocull    ]  OR THAT:     number of marker mesh - never getting culled and spawned on map load (eg: useful for distant light)                         [int 0-inf]
#           |>   areas:     (opt.) only show nocull marker when player is in specified area/s                                                           [int array]
#           |> N_leafs:     (opt.) only show nocull marker when player is in ^ and NOT in specified leaf/s                                              [int array]
#
# position:                 position of the marker mesh     [3D Vector]
# rotation:                 rotation of the marker mesh     [3D Vector]
# scale:                    scale of the marker mesh        [3D Vector]

[MARKER]
    c1m1_hotel = [

        # blocker on connecting hallway
        { nocull = 0, areas = [13], N_leafs = [2334, 2366, 2359, 2331, 2371, 2421, 2328, 2324, 1939, 1930], position = [1728.52, 5714.00, 2721.53], rotation = [90.00, 0.00, 0.00], scale = [2.08, 2.12, 1.00] },
        { nocull = 0, areas = [6], N_leafs = [2203, 2332, 2333], position = [1621.02, 5628.00, 2721.53], rotation = [90.00, 90.00, 0.00], scale = [2.04, 2.12, 1.00] },
        { nocull = 0, areas = [6], N_leafs = [2332, 2203, 2333], position = [1854.76, 5599.16, 2717.03], rotation = [90.00, 73.70, 0.00], scale = [3.24, 2.94, 1.00] },

        # sun
        { nocull = 1, areas = [], N_leafs = [], position = [278.09, 5762.70, 2992.07], rotation = [0.00, 0.00, 0.00], scale = [1.00, 1.00, 1.00] },

        # for flashling lights in first hallway
        { nocull = 2, areas = [21, 13, 23], N_leafs = [], position = [636.87, 5553.34, 2790.46], rotation = [0.00, 0.00, 0.00], scale = [1.00, 1.00, 1.00] },

        # sunlight blocker for hallway lower floor
        { nocull = 0, areas = [], N_leafs = [], position = [388.70, 5970.55, 2540.47], rotation = [0.00, 90.00, 0.00], scale = [10.34, 6.88, 1.00] },

        # blocker on connecting hallway lower floor
        { nocull = 0, areas = [7], N_leafs = [2505, 2512, 2506, 2498], position = [1574.95, 5626.94, 2526.51], rotation = [0.00, 90.00, 0.00], scale = [2.25, 2.07, 1.00] },

        # sunlight blocker lowest floor kitchen
        { nocull = 0, areas = [8], N_leafs = [], position = [70.53, 6013.90, 1262.53], rotation = [0.00, 90.00, 0.00], scale = [2.60, 9.66, 1.00] },
    ]

    c2m1_highway = [
        { nocull = 101, areas = [], N_leafs = [], position = [10457.524414, 7875.057617, -551.203003], rotation = [0.000000, 0.000000, 0.000000], scale = [1.000000, 1.000000, 1.000000] },
        { nocull = 0, areas = [], N_leafs = [], position = [1792.145996, 3136.987061, -815.197998], rotation = [90.000000, 0.000000, 90.000000], scale = [5.260000, 30.660000, 1.000000] },
    ]

    c3m1_plankcountry = [
        { nocull = 300, areas = [], N_leafs = [], position = [-12668.542969, 10249.047852, 288.393005], rotation = [0.000000, 0.000000, 0.000000], scale = [1.000000, 1.000000, 1.000000] },
        { nocull = 300, areas = [], N_leafs = [], position = [-7192.530762, 7555.255859, 129.031006], rotation = [0.000000, 0.000000, 0.000000], scale = [1.000000, 1.000000, 1.000000] },
    ]

    c3m2_swamp = [
        { nocull = 300, areas = [], N_leafs = [], position = [-8232.350586, 7516.061035, 56.499001], rotation = [0.000000, 0.000000, 0.000000], scale = [1.000000, 1.000000, 1.000000] },
        
        # fix missing geo under-water (safezone)
        { nocull = 0, areas = [], N_leafs = [], position = [-8170.187988, 7167.500000, -34.000000], rotation = [87.298000, 0.000000, 90.000000], scale = [0.500000, 2.500000, 1.000000] },
    ]



# Remix variable configs ---------------------------------------------------------------------------------------------------------------------------------
# :: Useful console command: 'xo_scene_print' && 'xo_debug_toggle_node_vis' && 'xo_debug_toggle_sound_print'
# ~~ Parameters:
#
#     startup:  configs that will be loaded on map-load, conf matching the map name will be loaded automatically and does not need to be specified              [array of strings]
#
# -----------
# transitions:  load / transition to config values on specified events                                                                                          [array of structure below]
# [{            |> conf:         name of config containing remix (goal) variables                                                                               [string]
#               |> trigger:      trigger config loading / transition via choreography (.vcd), sound or leaf
#                                |> choreo ]    THIS:                       name of choreography (.vcd) that will trigger the transition (can be a substring)   [string]
#                                          ]             |> actor:   (opt.) name of actor the event is played on                                                [string]
#                                          ]             |> event:   (opt.) name of the event within the .vcd (can be a substr)                                 [string]
#                                          ]             |> param1:  (opt.) name of the event within the .vcd (can be a substr)                                 [string]
#                                          ] 
#                                |> sound  ] OR THAT:    hash made up of name, index and position (cmd: see desc.) OR substring of soundname                    [integer] (hex format) || [string]
#                                |> leafs  ] OR THAT:    leaf's that will trigger the transition                                                                [int array]
#                                                        [!] moving from one leaf to another connected & defined leaf will not trigger the transition
#
#               |> mode:         [0] ONCE:   On Enter/Start -- [1] ONCE: On Leave/End   (will only be activated once - until map or map_settings reload)        [int 0-3]
#                                [2] ALWAYS: On Enter/Start -- [3] ALWAYS: On Leave/End (sounds only use ONCE or ALWAYS 0-1 or 2-3)
#               
#               |> ease:         [0] LINEAR                                                                                                                     [int 0-9]
#                                [1] SIN_IN   -- [2] SIN_OUT   -- [3] SIN_INOUT
#                                [4] CUBIC_IN -- [5] CUBIC_OUT -- [6] CUBIC_INOUT
#                                [7] EXPO_IN  -- [8] EXPO_OUT  -- [9] EXPO_INOUT
#               
#               |> duration:     transition time (in seconds)                                                                                                   [float]
#               |> delay_in:     delay start of transition (in seconds)                                                                                         [float]
#               |> delay_out:    delay between end of transition and transition back to the initial starting value (in seconds) - only active if value > 0      [float]
# }]

[CONFIGVARS]
    # Migraine # startup = ["c1m1_hotel_intro.conf"]
    c1m1_hotel = { transitions = [

        { conf = "c1m1_hotel_intro.conf", trigger = { sound = 0x635e5c94 }, mode = 0, duration = 0.0 },
        { conf = "c1m1_hotel.conf", trigger = { sound = 0x31c790a5 }, mode = 0, duration = 16.0, delay_in = 18.0 },
        #{ conf = "chromatic_explosion.conf", trigger = { choreo = "scenes/", actor = "", event = "angry - dialogue" }, mode = 2, ease = 8, duration = 0.5, delay_in = 0.0, delay_out = 0.15 },
        #{ conf = "chromatic_explosion.conf", trigger = { sound = 0x87a91fef }, mode = 2, ease = 8, duration = 0.5, delay_in = 0.0, delay_out = 0.15 },
        #{ conf = "chromatic_explosion.conf", trigger = { sound = "weapons/pistol/gunfire/pistol_fire.wav" }, mode = 2, ease = 8, duration = 0.25, delay_in = 0.0, delay_out = 0.15 },
        { conf = "fire_smokey_screen.conf", trigger = { sound = 0xda6f9ddf }, mode = 0, ease = 6, duration = 13.0, delay_in = 0.0 },
        { conf = "fire_smokey_screen.conf", trigger = { leafs = [4364] }, mode = 2, ease = 0, duration = 5.0, delay_in = 0.0 },
        { conf = "fire_smokey_screen_half.conf", trigger = { leafs = [4367, 4373] }, mode = 2, ease = 0, duration = 5.0, delay_in = 0.0 },
        { conf = "fire_smokey_screen_half_quarter.conf", trigger = { leafs = [4371] }, mode = 2, ease = 0, duration = 5.0, delay_in = 0.0 },
    ]}



# Spawn lights using the remix api ---------------------------------------------------------------------------------------------------------------------------------
# :: Useful console command: 'xo_debug_scene_print' (choreo trigger/kill) && 'xo_debug_toggle_sound_print' (sound trigger/kill) && 'xo_debug_toggle_model_info' (attach)
# ~~ Parameters:
#
# trigger:          (optional) trigger light creation via choreography (.vcd) or sound
# {                 [!] not defining this will create the light on map load 
#
#                   |> choreo ]    THIS:    |> choreo:         name of choreography (.vcd) that will trigger the transition (can be a substring)    [string]
#                             ]             |> actor:   (opt.) name of actor the event is played on                                                 [string]
#                             ]             |> event:   (opt.) name of the event within the .vcd (can be a substr)                                  [string]
#                             ]             |> param1:  (opt.) name of the event within the .vcd (can be a substr)                                  [string]
#                             ] 
#                   |> sound  ] OR THAT:    hash made up of name, index and position (cmd: see desc.)                                               [integer] (hex format)
#
#                             |> delay:     delay spawn after trigger (in seconds)                                                                  [float]
#                             |> always:    re-triggering the event again will spawn a new light instance everytime (defaults to false)             [bool]
# }
# -----------
# kill:             (optional) kill light via choreography (.vcd) or sound
# {                 [!] not defining this || empty string/hash -> light will loop until the map gets unloaded or once loop is complete when run_once is true
#
#                   |> choreo ]    THIS:    name of choreography (.vcd) (can be a substring)                                                        [string]
#                   |> sound  ] OR THAT:    hash made up of name, index and position (cmd: see desc.)                                               [integer] (hex format)
#
#                             |> delay:     delay kill after vcd was triggered (in seconds)                                                         [float]
# }
# -----------
# attach:           (optional) attach light to a prop so it moves with the prop - points are relative to the prop the light gets attached to
# {                 |> radius   ]    THIS:  radius of prop (recommended) (cmd: see desc.)                                                           [float]
#                   |> name     ] OR THAT:  model name that contains this substring (cmd: see desc.)                                                [string]
#                   
#                               |> bounds:  (opt.) define bounds (min/max) where the light can spawn and attach to the prop (world coordinates)     [2x 3D Vector :: [minX, minY, minZ, maxX, maxY, maxZ]
# }
# -----------
# points:           (required) list of points that will make up a spline the light will move along                                                  [array of structure below]
# [{
#                   |> position:            X Y Z coordinates of light                                                                              [3D Vector]
#                                           [!] first point needs to define a position
#                                           [!] following ones will use the last defined position if position is not defined
#
#                   |> radiance:            R G B radiance of light (defaults to 10 10 10)                                                          [3D Vector 0-inf]
#                   |> scalar:              ^ radiance scalar
#                   |> radius:              radius of light (defaults to 1.0)                                                                       [float]
#                   |> smoothness:          curve smoothness (defaults to 0.5 - values above 1 might produce odd results)                           [float 0-1]
#                   |> timepoint:           time in seconds at which the light arrives at the point (evenly distributed if not specified)           [float]
#                                           [!] first timepoint is always 0
#                                           [!] timepoints can not be out of order
#                                           [!] last point requires a timepoint and defines the total duration
#
#                   |> direction:           light direction (will be normalized in code) (defaults to 0 0 1)                                        [3D Vector 0-inf] (will be normalized in code)
#                   |> degrees:             cone angle - anything besides 180 turns ON light shaping (defaults to 180)                              [float 0-180]
#                   |> softness:            cone softness (defaults to 0)                                                                           [float 0-PI]
#                   |> exponent:            focus expo (defaults to 0)                                                                              [float]
# }]
# -----------
# run_once:         ]    THIS:              destroy light after reaching the last point (default: false)                                            [bool]
# loop:             ] OR THAT:              create a looping light that restarts at the first point after reaching the last point (default: false)  [bool]
# loop_smoothing:   ] OR THAT:              automatically connect and smooth the start and end point (default: false)                               [bool]
#                                           [!] requires 'loop' to be true
#                                           [!] only position + timepoint is used from the last point 

[LIGHTS]
    c1m1_hotel = [
        # red flashing light when opening the first door :: doors/door1_stop.wav -- delay: 0.00 -- vol: 0.69 -- origin: [408.00000 5600.00000 2704.00000]
        { trigger = { sound = 0xe826cc9a, delay = 0.0 }, points = [
            { position = [378.5, 5675, 2755], radiance = [20.0, 0.0, 0.0], scalar = 0.0, radius = 3.0, smoothness = 1.0 },
            { position = [378.5, 5675, 2755], radiance = [20.0, 0.0, 0.0], scalar = 3.0, radius = 4.0, smoothness = 1.0, timepoint = 2 },
        ], loop = true, loop_smoothing = true },

        # flashing firelight 1
        { points = [
            { position = [632.049988, 5542.350098, 2754.979980], radiance = [10.000000, 10.000000, 10.000000], scalar = 4.000000, radius = 3.000000, smoothness = 0.500000 },
            { position = [632.049988, 5542.350098, 2754.979980], radiance = [10.000000, 10.000000, 10.000000], scalar = 0.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 0.100000 },
            { position = [632.049988, 5542.350098, 2754.979980], radiance = [10.000000, 10.000000, 10.000000], scalar = 4.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 0.300000 },
            { position = [632.049988, 5542.350098, 2754.979980], radiance = [10.000000, 10.000000, 10.000000], scalar = 0.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 0.400000 },
            { position = [632.049988, 5542.350098, 2754.979980], radiance = [10.000000, 10.000000, 10.000000], scalar = 0.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 2.27 },
        ], loop = true },

        # flashing firelight 2
        { points = [
            { position = [1025.023804, 5674.918945, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 4.000000, radius = 3.000000, smoothness = 0.500000 },
            { position = [1025.023804, 5674.918945, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 0.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 0.100000 },
            { position = [1025.023804, 5674.918945, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 4.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 0.300000 },
            { position = [1025.023804, 5674.918945, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 0.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 0.400000 },
            { position = [1025.023804, 5674.918945, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 0.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 2.270000 },
        ], loop = true },

        # flashing firelight 3
        { points = [
            { position = [1728.048706, 5574.531250, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 4.000000, radius = 3.000000, smoothness = 0.500000 },
            { position = [1728.048706, 5574.531250, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 0.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 0.100000 },
            { position = [1728.048706, 5574.531250, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 4.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 0.300000 },
            { position = [1728.048706, 5574.531250, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 0.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 0.400000 },
            { position = [1728.048706, 5574.531250, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 0.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 2.270000 },
        ], loop = true },

        # flashing firelight 4
        { points = [
            { position = [1670.531372, 6243.121094, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 4.000000, radius = 3.000000, smoothness = 0.500000 },
            { position = [1670.531372, 6243.121094, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 0.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 0.100000 },
            { position = [1670.531372, 6243.121094, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 4.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 0.300000 },
            { position = [1670.531372, 6243.121094, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 0.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 0.400000 },
            { position = [1670.531372, 6243.121094, 2754.031250], radiance = [10.000000, 10.000000, 10.000000], scalar = 0.000000, radius = 3.000000, smoothness = 0.500000, timepoint = 2.270000 },
        ], loop = true },

        # fire dummy on lower floor
        { points = [
            { position = [1584.96, 5624.39, 2526.03], radiance = [11.80, 4.60, 1.10], scalar = 4.20, radius = 2.60, smoothness = 0.50 },
        ], loop = true },


        # elevator light static until move
        { kill = { sound = 0x53C5D0E2, delay = 0.01 }, points = [
            { position = [2167.00, 5809.00, 2606.00], radiance = [12.20, 11.80, 10.00], scalar = 25.00, radius = 1.60, smoothness = 0.00 },
        ] },

        # elevator light ceiling dynamic
        { trigger = { sound = 0x53C5D0E2 }, attach = { radius = 20.00, bounds = [2228.00, 5700.00, 1188.00, 2265.00, 5725.00, 2573.00] }, points = [
            { position = [-77.00, 88.00, 85.50], radiance = [12.20, 11.80, 10.00], scalar = 25.00, radius = 1.60, smoothness = 0.00 },
            { position = [-77.00, 88.00, 85.50], radiance = [12.20, 11.80, 10.00], scalar = 25.00, radius = 1.60, smoothness = 0.00, timepoint = 23.83 },
            { position = [-77.00, 88.00, 86.00], radiance = [12.20, 11.80, 10.00], scalar = 25.00, radius = 1.60, smoothness = 0.00, timepoint = 23.9 },
            { position = [-77.00, 88.00, 86.00], radiance = [12.20, 11.80, 10.00], scalar = 25.00, radius = 1.60, smoothness = 0.00, timepoint = 25.83 },
            { position = [-77.00, 88.00, 86.00], radiance = [12.20, 11.80, 10.00], scalar = 0.00, radius = 1.60, smoothness = 0.00, timepoint = 25.95 },
            { position = [-77.00, 88.00, 86.00], radiance = [12.20, 11.80, 10.00], scalar = 5.00, radius = 1.60, smoothness = 0.00, timepoint = 26.15 },
            { position = [-77.00, 88.00, 86.00], radiance = [12.20, 11.80, 10.00], scalar = 5.00, radius = 1.60, smoothness = 0.00, timepoint = 26.45 },
            { position = [-77.00, 88.00, 86.00], radiance = [12.20, 11.80, 10.00], scalar = 0.00, radius = 1.60, smoothness = 0.00, timepoint = 26.65 },
        ] },

        # elevator light button dynamic
        { trigger = { sound = 0x53C5D0E2 }, attach = { radius = 20.00, bounds = [2228.00, 5700.00, 1188.00, 2265.00, 5725.00, 2573.00] }, points = [
            { position = [2.50, 0.40, -3.40], radiance = [12.20, 11.80, 10.00], scalar = 25.00, radius = 0.50, smoothness = 0.00 },
            { position = [2.50, 0.40, -3.40], radiance = [12.20, 11.80, 10.00], scalar = 25.00, radius = 0.50, smoothness = 0.00, timepoint = 23.83 },
            { position = [2.50, 0.40, -2.90], radiance = [12.20, 11.80, 10.00], scalar = 25.00, radius = 0.50, smoothness = 0.00, timepoint = 23.90 },
            { position = [2.50, 0.40, -2.90], radiance = [12.20, 11.80, 10.00], scalar = 25.00, radius = 0.50, smoothness = 0.00, timepoint = 25.83 },
            { position = [2.50, 0.40, -2.90], radiance = [12.20, 11.80, 10.00], scalar = 0.00,  radius = 0.50, smoothness = 0.00, timepoint = 25.95 },
        ] },

        # elevator light button dynamic no trig (testing)
        #{ attach = { radius = 20.00, bounds = [2228.00, 5700.00, 1188.00, 2265.00, 5725.00, 2573.00] }, points = [
        #    { position = [2.50, 0.40, -4.40], radiance = [12.20, 0, 0], scalar = 25.00, radius = 0.50, smoothness = 0.00 },
        #    { position = [2.50, 0.40, -4.40], radiance = [12.20, 0, 0], scalar = 1.00, radius = 0.50, smoothness = 0.00, timepoint = 1.0 },
        #], loop = 1, loop_smoothing = 1 },


        # elevator light button dynamic no trig single pt (testing)
        #{ attach = { radius = 20.00, bounds = [2228.00, 5700.00, 1188.00, 2265.00, 5725.00, 2573.00] }, points = [
        #    { position = [2.50, 0.40, -6.40], radiance = [0, 20, 0], scalar = 25.00, radius = 0.50, smoothness = 0.00 },
        #]},


        # example
        #{ trigger = { choreo = "scenes/", actor = "", event = "angry - dialogue", delay = 0.1, always = true }, points = [
        #    { position = [290.0, 5650.0, 2910.0], radiance = [0.0, 10.0, 20.0], radius = 5.0, smoothness = 0.5 },
        #    { position = [290.0, 5650.0, 2910.0], radiance = [50.0, 0.0, 0.0], radius =  5.0, smoothness = 2.0, timepoint = 2 },
        #    { position = [290.0, 5650.0, 2910.0], radiance = [50.0, 0.0, 0.0], radius =  5.0, smoothness = 1.0, timepoint = 4 },
        #    { position = [290.0, 5650.0, 2910.0], radiance = [50.0, 0.0, 0.0], radius =  5.0, smoothness = 1.0, timepoint = 6 },
        #], run_once = true, loop = false },

        # example
        #{ points = [
        #    { position = [-922.0, -500.0, -60.0], radiance = [0.0, 0.0, 0.0], radius = 10.0 },
        #    { radiance = [50.0, 0.0, 0.0],  radius = 5.0, timepoint = 3 }, # prev position will be used until new pos is defined
        #    { radiance = [50.0, 0.0, 50.0], radius = 5.0, timepoint = 6 },
        #    { radiance = [0.0, 50.0, 25.0], radius = 5.0, timepoint = 9 }, # last point NEEDS to define a timepoint
        #], run_once = false, loop = true, loop_smoothing = true },                    # loop_smoothing to smoothly trans. back to first point
    ]