# Fog Settings
# Parameters ---------------------------------------------------------------------------------------------------------------------------------
#
# distance:     larger distance == less fog
# color:        R G B (0-255) transmission

[FOG]
    c1m1_hotel = { distance = 150000, color = [180, 160, 120] }



# Water UV Scale
# Parameters ---------------------------------------------------------------------------------------------------------------------------------
#
# Small values reduce repetition while larger values will increase tiling (default = 1.0)

[WATER]
    #c1m1_hotel = 5.0



# Override culling per game area
# Useful console command: 'xo_debug_toggle_node_vis'
# Parameters ---------------------------------------------------------------------------------------------------------------------------------
#
# area:         the area the player has to be in
# leafs:        leaf/s with forced visibility [int array]
# areas:        area/s with forced visibility [int array]
# cull:         [0] disable frustum culling
#               [1] frustum culling (still forces leaf/s)
#               [2] frustum culling (still forces leaf/s + forces all leafs in current area) (default, even when parameter 'cull' is not used) 
#
# hide_leafs:   force hide leaf/s   [int array]
#
# hide_areas:   force hide area/s   [int array]
# |>   areas:   area/s to hide      [int array]
# |> N_leafs:   only hide area/s when NOT in specified leaf/s [int array]

[CULL]
    #c1m1_hotel = [
    #    { area = 2, leafs = [436, 950] },
    #    { area = 3, leafs = [370, 621, 652, 697] },
    #    { area = 4, leafs = [370, 371, 436, 449, 452, 466, 483, 708, 841, 950] },
    #    { area = 5, leafs = [621] }
    #]



# Can be used to hide models (eg. when a certain model is used a lot, it can make sense to hide them and manually re-add the models by adding them as references to map markers (toolkit) - will help with cpu bottlenecks)
# Useful console command: 'xo_debug_toggle_model_info'
# Parameters ---------------------------------------------------------------------------------------------------------------------------------
#
# name   :   force hide models containing the specified substring [string array]
# radius :   force hide models with this radius (checking for radii is generally faster and the preferred way to filter models) [float array]

[HIDEMODEL]
    #sp_a4_finale2 = { name = [
    #        "tube", "arm"
    #    ], radius = [
    #        896.805298, #models/a4_destruction/arm_ext_halfres_rows_4x1.mdl
    #    ]}



# Spawn unique markers that can be used as anchor meshes
# Parameters ---------------------------------------------------------------------------------------------------------------------------------
#
# marker     ]    THIS:     number of marker mesh - can get culled BUT that can be controlled via leaf/area forcing (initial spawning can't be forced) [int 0-100]
# nocull     ] OR THAT:     number of marker mesh - never getting culled and spawned on map load (eg: useful for distant light) [int 0-inf.]
#                           [!] both can be spawned multiple times per map
#
# position:                 X Y Z position of the marker mesh [3D Vector]

[MARKER]
    #c1m1_hotel = [
    #    { marker = 0, position = [-4600, 1380, 1320] }
    #]



# Remix variable configs
# Useful console command: 'scene_print' && 'xo_debug_toggle_node_vis'
# Parameters ---------------------------------------------------------------------------------------------------------------------------------
#
# startup:      configs that will be loaded on map-load, conf matching the map name will be loaded automatically and does not need to be specified
# conf:         name of config containing remix options (goal values)
#
# leafs:    ]      THIS:    leaf's that will trigger the transition [array] (moving from one leaf to another connected & defined leaf will not trigger the transition) [int array]
# choreo:   ]   OR THAT:    name of choreography (.vcd) that will trigger the transition (can be a substring - keep as short as possible) (has prio. over leafs param)
#
# mode:         [0] ONCE:   On Enter/Start -- [1] ONCE: On Leave/End    // transition will only be activated once (until map reload or map_settings reload)
#               [2] ALWAYS: On Enter/Start -- [3] ALWAYS: On Leave/End
#
# ease:         [0] LINEAR 
#               [1] SIN_IN   -- [2] SIN_OUT   -- [3] SIN_INOUT
#               [4] CUBIC_IN -- [5] CUBIC_OUT -- [6] CUBIC_INOUT
#               [7] EXPO_IN  -- [8] EXPO_OUT  -- [9] EXPO_INOUT
#
# duration:     transition time (in seconds) [float]
# delay_in:     delay start of transition (in seconds) [float]
# delay_out:    delay between end of transition and transition back to the initial starting value (in seconds) - only active if value > 0 [float]

[CONFIGVARS]
    # Hello Migraine
    #sp_a1_intro1 = { transitions = [
    #    { conf = "chromatic_explosion.conf", choreo = "npc\\sphere03\\OpeningHello", mode = 2, ease = 8, duration = 0.5, delay_in = 0.0, delay_out = 0.15 }
    #]}



# Spawn lights using the remix api
# Useful console command: 'scene_print' && 'xo_debug_toggle_sound_print'
# Parameters ---------------------------------------------------------------------------------------------------------------------------------
#
# trigger:          trigger light creation via choreography (.vcd) or sound
#                   [!] not defining this will create the light on map load 
#
#                   > choreo ]    THIS:     name of choreography (.vcd) (can be a substring) [string]
#                   > sound  ] OR THAT:     hash made up of name, index and position (cmd: xo_debug_toggle_sound_print) (hex format) [integer]
#                   > delay:                delay spawn after trigger (in seconds) [float]
#                   > always:               re-trigger every time and not only once [0-1] (defaults to 0)
# -----------
# kill:             kill light via choreography (.vcd) or sound
#                   [!] not defining this || empty string/hash -> light will loop until the map gets unloaded or once loop is complete when run_once is true
#
#                   > choreo ]    THIS:     name of choreography (.vcd) (can be a substring) [string]
#                   > sound  ] OR THAT:     hash made up of name, index and position (cmd: xo_debug_toggle_sound_print) (hex format) [integer]
#                   > delay:                delay kill after vcd was triggered (in seconds) [float]
# -----------
# points:           list of points that will make up a spline the light will move along [3D Vector Array]
#
#                   > position:     X Y Z coordinates of light [3D Vector]
#                                   [!] first point needs to define a position - following ones will use the last defined position if position is not defined
#
#                   > radiance:     R G B radiance of light [3D Vector] (defaults to 10 10 10)
#                   > scalar:       ^ radiance scalar
#                   > radius:       radius of light [float] (defaults to 1.0)
#                   > smoothness:   curve smoothness [float 0-1] (defaults to 0.5 - values above 1 might produce odd results)
#                   > timepoint:    time in seconds at which the light arrives at the point (float) (evenly distributed if not specified)
#                                   [!] first timepoint is always 0
#                                   [!] timepoints can not be out of order
#                                   [!] last point requires a timepoint and defines the total duration
#
#                   > direction:    light direction (will be normalized in code) [3D Vector] (defaults to 0 0 1)
#                   > degrees:      cone angle - anything besides 180 turns ON light shaping [float 0-180] (defaults to 180)
#                   > softness:     cone softness [float 0-PI] (defaults to 0)
#                   > exponent:     focus expo [float] (defaults to 0)
# -----------
# run_once:         ]     THIS:     destroy light after reaching the last point (to kill light without choreo) [0-1] (defaults to 0)
# loop:             ] OR THESE:     create a looping light that restarts at the first point after reaching the last point [0-1] (defaults to 0)
# loop_smoothing:   ] OR THESE:     automatically connect and smooth the start and end point [0-1] (defaults to 0)
#                                   [!] requires 'loop' to be true
#                                   [!] only position + timepoint is used from the last point 

[LIGHTS]
    c1m1_hotel = [
            # 1st light - infinite loop
            #{ points = [
            #    { position = [-922.0, -500.0, -60.0], radiance = [0.0, 10.0, 20.0], radius = 5.0, smoothness = 0.5 },
            #    { position = [-922.0, -400.0, 0.0], radiance = [50.0, 0.0, 0.0], radius =  5.0, smoothness = 2.0, timepoint = 2 },
            #    { position = [-922.0, -700.0, 80.0], radiance = [50.0, 0.0, 0.0], radius =  5.0, smoothness = 1.0, timepoint = 4 },
            #    { position = [-922.0, -600.0, 0.0], radiance = [50.0, 0.0, 0.0], radius =  5.0, smoothness = 1.0, timepoint = 6 },
            #], run_once = 0, loop = 1, loop_smoothing = 1 },

            # 2nd light - triggered and killed by choreo event - looping until killed (scene_playvcd "npc/announcer/prehub28.vcd")
            #{ trigger = { choreo = "prehub27.vcd", delay = 0.0 }, kill = { choreo = "prehub28.vcd", delay = 0.0 }, points = [
            #    { position = [-1057.9, -336.7, -15.7], radiance = [50.0, 0.0, 20.0], radius = 10.0, smoothness = 1.0 },
            #    { position = [-941.9, -379.1, 46.8],   radiance = [20.0, 0.0, 50.0], radius =  5.0, smoothness = 1.0 },
            #    { position = [-1156.7, -638.2, 97.9],  radiance = [0.0, 50.0, 20.0], radius = 15.0, smoothness = 1.0 },
            #    { position = [-1262.3, -489.4, -10.6], radiance = [20.0, 0.0, 50.0], radius =  3.0, smoothness = 1.0 },
            #    { position = [-1232.0, -399.4, -8.2],  radiance = [50.0, 0.0, 20.0], radius = 10.0, smoothness = 1.0 },
            #    { position = [-1189.4, -373.6, 0.1],   radiance = [20.0, 0.0, 50.0], radius =  3.0, smoothness = 1.0 },
            #    { position = [-1057.9, -336.7, -15.7], radiance = [50.0, 0.0, 20.0], radius = 10.0, timepoint = 2.0, smoothness = 1.0 },
            #], run_once = 0, loop = 1, loop_smoothing = 1 },

            # 3rd light
            #{ points = [
            #    { position = [-922.0, -500.0, -60.0], radiance = [0.0, 0.0, 0.0], radius = 10.0 },
            #    { radiance = [50.0, 0.0, 0.0],  radius = 5.0, timepoint = 3 }, # prev position will be used until new pos is defined
            #    { radiance = [50.0, 0.0, 50.0], radius = 5.0, timepoint = 6 },
            #    { radiance = [0.0, 50.0, 25.0], radius = 5.0, timepoint = 9 }, # last point NEEDS to define a timepoint
            #], run_once = 0, loop = 1, loop_smoothing = 1 },                    # loop_smoothing to smoothly trans. back to first point

            # 4th light - spotlight
            #{ points = [
            #    { position = [-922.0, -500.0, -60.0], radiance = [0.0, 0.0, 50.0],  radius = 10.0, smoothness = 0.5, degrees = 180.0, direction = [0, 0, 1]  },
            #    { radiance = [50.0, 0.0, 0.0],  radius = 10.0, smoothness = 0.5, degrees = 90.0, direction = [0, 1, 0]  },
            #    { radiance = [0.0, 50.0, 0.0],  radius = 10.0, smoothness = 0.5, degrees = 45.0, direction = [1, 0, 0]  },
            #    { radiance = [25.0, 0.0, 25.0], radius = 10.0, smoothness = 0.5, degrees = 90.0, direction = [0.5, 0.5, 0], timepoint = 6 },
            #], run_once = 0, loop = 1, loop_smoothing = 1 },
        ]